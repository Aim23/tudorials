file: Part 5/Start Here/Binance.py
line: 8
align: bottom
---
from decimal import Decimal
↓↓↓↓↓↓↓↓↓→⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↓↓↓request_delay = 20000↓↓

  ORDER_STATUS_NEW = 'NEW'
	ORDER_STATUS_PARTIALLY_FILLED = 'PARTIALLY_FILLED'
	ORDER_STATUS_FILLED = 'FILLED'
	ORDER_STATUS_CANCELED = 'CANCELED'
	ORDER_STATUS_PENDING_CANCEL = 'PENDING_CANCEL'
	ORDER_STATUS_REJECTED = 'REJECTED'
	ORDER_STATUS_EXPIRED = 'EXPIRED'

	SIDE_BUY = 'BUY'
	SIDE_SELL = 'SELL'

	ORDER_TYPE_LIMIT = 'LIMIT'
	ORDER_TYPE_MARKET = 'MARKET'
	ORDER_TYPE_STOP_LOSS = 'STOP_LOSS'
	ORDER_TYPE_STOP_LOSS_LIMIT = 'STOP_LOSS_LIMIT'
	ORDER_TYPE_TAKE_PROFIT = 'TAKE_PROFIT'
	ORDER_TYPE_TAKE_PROFIT_LIMIT = 'TAKE_PROFIT_LIMIT'
	ORDER_TYPE_LIMIT_MAKER = 'LIMIT_MAKER'

	KLINE_INTERVALS = ['1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w', '1M']

↓↓↓↓↓↓↓↓↓↓↓↑⇥,
      "24hrTicker" : '/api/v3/ticker/24hr',
      "averagePrice" : '/api/v3/avgPrice',
      "orderBook" : '/api/v3/depth',
      "account" : '/api/v3/account'↓↓
		self.account_access = False

		if filename == None:
			return
	
		f = open(filename, "r")
		contents = []
		if f.mode == 'r':
			contents = f.read().split('\n')

		self.binance_keys = dict(api_key = contents[0], secret_key=contents[1])↓
		self.account_access = True
	
	def _get(self, url, params=None, headers=None) -> dict:
		""" Makes a Get Request """
		try: 
			response = requests.get(url, params=params, headers=headers)
			data = json.loads(response.text)
			data['url'] = url
		except Exception as e:
			print("Exception occured when trying to access "+url)
			print(e)
			data = {'code': '-1', 'url':url, 'msg': e}
		return data

	def _post(self, url, params=None, headers=None) -> dict:
		""" Makes a Post Request """
		try: 
			response = requests.post(url, params=params, headers=headers)
			data = json.loads(response.text)
			data['url'] = url
		except Exception as e:
			print("Exception occured when trying to access "+url)
			print(e)
			data = {'code': '-1', 'url':url, 'msg': e}
		return data↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
↑   
  def GetSymbolDataOfSymbols(self, symbols:list=None):
		''' Gets All symbols which are tradable (currently) '''
		url = self.base + self.endpoints["exchangeInfo"]
		data = self._get(url)
		if data.__contains__('code'):
			return []

		symbols_list = []

		for pair in data['symbols']:
			if pair['status'] == 'TRADING':
				if symbols != None and pair['symbol'] in symbols:
					symbols_list.append(pair)

		return symbols_list↓↓→→→⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫SymbolKlinesExtra↓↓↓↓↓↓↓↓↓↓↓↓↓⌫⌫⌫⌫Klines↓↓↓↓⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫df2 = self.GetSymbolKlines(symbol, interval, limit=1000, end_time=df['time'][0])↓↓↓↓↓
↑   
  def GetAccountData(self) -> dict:
		""" Gets Balances & Account Data """

		url = self.base + self.endpoints["account"]
		
		params = {
		'recvWindow': 6000,
		'timestamp': int(round(time.time()*1000)) + request_delay
		}
		self.signRequest(params)
		
		return self._get(url, params, self.headers)

	def Get24hrTicker(self, symbol:str):
		url = self.base + self.endpoints['24hrTicker'] + "?symbol="+symbol
		return self._get(url)↓↓←←←←←⌫⌫⌫⌫Klines↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓→→→→→→→→→→→→→→⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫SymbolKlinesExtra→→→→→→→→→→→→→→→→→→→→→→→→→⌫,↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

  def PlaceOrderFromDict(self, params, test:bool=False):
		""" Places order from params dict """

		params['recvWindow'] = 5000
		params['timestamp'] = int(round(time.time()*1000)) + request_delay
		
		self.signRequest(params)
		url = ''
		if test: 
			url = self.base + self.endpoints['testOrder']
		else:
			url = self.base + self.endpoints['order']
		return self._post(url, params, self.headers)↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓⇥ + request_delay ↓↓↓↓↓⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫Binance.floatToString(price)↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫↓↓↓↓↓↓↓↓⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫self._post(url, params=params, headers=self.headers)↓↓↓↓↓↓↓↓↓↓↓⇥ + request_delay↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓⇥←←←←←←←←←←←←←←←←←iginalClientOr↓↓⇥ + request_delay↓↓↓↓↓↓↓↓↓↓↓↓↓⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫↓↓↓↓↓↓↓↓⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫self._get(url, params=params, headers=self.headers)↓↓↓↓↓↓↓↓↓↓⇥ + request_delay↓↓↓↓↓↓↓↓↓↓↓↓↓⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫↑⇥⌫⌫⌫⌫⌫↓↓↓↓↓↓↓↓⇥⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫⌫self._get(url, params=params, headers=self.headers)↓
  @classmethod↓→→→→→→→→→⌫⌫⌫⌫cls↓↓↓↓↓↓↓↓↓↓↓↓↓→self.↓↓











↑↑↑↑↑↑↑↑↑↑↑↑
  @classmethod
	def get10Factor(cls, num):
		""" Returns the number of 0s before the first non-0 digit of a number 
		(if |num| is < than 1) or negative the number of digits between the first 
		integer digit and the last, (if |num| >= 1) 
		
		get10Factor(0.00000164763) = 6
		get10Factor(1600623.3) = -6
		"""
		p = 0
		for i in range(-20, 20):
			if num == num % 10**i:
				p = -(i - 1)
				break
		return p

	@classmethod
	def RoundToValidPrice(cls, symbol_data, desired_price, round_up:bool=False) -> Decimal:
		""" Returns the minimum quantity of a symbol we can buy,
		closest to desiredPrice """
		
		pr_filter = {}
		
		for fil in symbol_data["filters"]:
			if fil["filterType"] == "PRICE_FILTER":
				pr_filter = fil
				break
		
		if not pr_filter.keys().__contains__("tickSize"):
			raise Exception("Couldn't find tickSize or PRICE_FILTER in symbol_data.")
			return

		round_off_number = int(cls.get10Factor((float(pr_filter["tickSize"]))))

		number = round(Decimal(desired_price), round_off_number)
		if round_up:
			number = number + Decimal(pr_filter["tickSize"])

		return number

	@classmethod
	def RoundToValidQuantity(cls, symbol_data, desired_quantity, round_up:bool=False) -> Decimal:
		""" Returns the minimum quantity of a symbol we can buy,
		closest to desiredPrice """
		
		lot_filter = {}
		
		for fil in symbol_data["filters"]:
			if fil["filterType"] == "LOT_SIZE":
				lot_filter = fil
				break
		
		if not lot_filter.keys().__contains__("stepSize"):
			raise Exception("Couldn't find stepSize or PRICE_FILTER in symbol_data.")
			return

		round_off_number = int(cls.get10Factor((float(lot_filter["stepSize"]))))

		number = round(Decimal(desired_quantity), round_off_number)
		if round_up:
			number = number + Decimal(lot_filter["stepSize"])

		return number